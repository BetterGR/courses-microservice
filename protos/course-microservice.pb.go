// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: course-microservice.proto

package course_protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to retrieve a course by its unique ID.
type GetCourseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId      string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseRequest) Reset() {
	*x = GetCourseRequest{}
	mi := &file_course_microservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseRequest) ProtoMessage() {}

func (x *GetCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseRequest.ProtoReflect.Descriptor instead.
func (*GetCourseRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{0}
}

func (x *GetCourseRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

// Response containing details of a course.
type GetCourseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// Course name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Course description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Course semester.
	Semester string `protobuf:"bytes,4,opt,name=semester,proto3" json:"semester,omitempty"`
	// Staff IDs associated with the course.
	StaffIds []string `protobuf:"bytes,5,rep,name=staff_ids,json=staffIds,proto3" json:"staff_ids,omitempty"`
	// Student IDs enrolled in the course.
	StudentIds    []string `protobuf:"bytes,6,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseResponse) Reset() {
	*x = GetCourseResponse{}
	mi := &file_course_microservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseResponse) ProtoMessage() {}

func (x *GetCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseResponse.ProtoReflect.Descriptor instead.
func (*GetCourseResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{1}
}

func (x *GetCourseResponse) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *GetCourseResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCourseResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCourseResponse) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *GetCourseResponse) GetStaffIds() []string {
	if x != nil {
		return x.StaffIds
	}
	return nil
}

func (x *GetCourseResponse) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

// Request to create a new course.
type CreateCourseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Course description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Course semester.
	Semester      string `protobuf:"bytes,3,opt,name=semester,proto3" json:"semester,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCourseRequest) Reset() {
	*x = CreateCourseRequest{}
	mi := &file_course_microservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseRequest) ProtoMessage() {}

func (x *CreateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseRequest.ProtoReflect.Descriptor instead.
func (*CreateCourseRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCourseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCourseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCourseRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

// Response containing the unique ID of the created course.
type CreateCourseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId      string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCourseResponse) Reset() {
	*x = CreateCourseResponse{}
	mi := &file_course_microservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseResponse) ProtoMessage() {}

func (x *CreateCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseResponse.ProtoReflect.Descriptor instead.
func (*CreateCourseResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCourseResponse) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

// Request to update an existing course.
type UpdateCourseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// New course name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// New course description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Updated semester.
	Semester      string `protobuf:"bytes,4,opt,name=semester,proto3" json:"semester,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCourseRequest) Reset() {
	*x = UpdateCourseRequest{}
	mi := &file_course_microservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCourseRequest) ProtoMessage() {}

func (x *UpdateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCourseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCourseRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCourseRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *UpdateCourseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCourseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCourseRequest) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

// Response indicating if the course update was successful.
type UpdateCourseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Update success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCourseResponse) Reset() {
	*x = UpdateCourseResponse{}
	mi := &file_course_microservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCourseResponse) ProtoMessage() {}

func (x *UpdateCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCourseResponse.ProtoReflect.Descriptor instead.
func (*UpdateCourseResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCourseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request to add a student to a course.
type AddStudentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// Student ID.
	StudentId     string `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStudentRequest) Reset() {
	*x = AddStudentRequest{}
	mi := &file_course_microservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStudentRequest) ProtoMessage() {}

func (x *AddStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStudentRequest.ProtoReflect.Descriptor instead.
func (*AddStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{6}
}

func (x *AddStudentRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *AddStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

// Response indicating if the student was successfully added.
type AddStudentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Add success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStudentResponse) Reset() {
	*x = AddStudentResponse{}
	mi := &file_course_microservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStudentResponse) ProtoMessage() {}

func (x *AddStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStudentResponse.ProtoReflect.Descriptor instead.
func (*AddStudentResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{7}
}

func (x *AddStudentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request to remove a student from a course.
type RemoveStudentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// Student ID.
	StudentId     string `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStudentRequest) Reset() {
	*x = RemoveStudentRequest{}
	mi := &file_course_microservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStudentRequest) ProtoMessage() {}

func (x *RemoveStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStudentRequest.ProtoReflect.Descriptor instead.
func (*RemoveStudentRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveStudentRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *RemoveStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

// Response indicating if the student was successfully removed.
type RemoveStudentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Remove success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStudentResponse) Reset() {
	*x = RemoveStudentResponse{}
	mi := &file_course_microservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStudentResponse) ProtoMessage() {}

func (x *RemoveStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStudentResponse.ProtoReflect.Descriptor instead.
func (*RemoveStudentResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveStudentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request to add a staff member to a course.
type AddStaffRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// Staff ID.
	StaffId       string `protobuf:"bytes,2,opt,name=staff_id,json=staffId,proto3" json:"staff_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStaffRequest) Reset() {
	*x = AddStaffRequest{}
	mi := &file_course_microservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStaffRequest) ProtoMessage() {}

func (x *AddStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStaffRequest.ProtoReflect.Descriptor instead.
func (*AddStaffRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{10}
}

func (x *AddStaffRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *AddStaffRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

// Response indicating if the staff member was successfully added.
type AddStaffResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Add success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStaffResponse) Reset() {
	*x = AddStaffResponse{}
	mi := &file_course_microservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStaffResponse) ProtoMessage() {}

func (x *AddStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStaffResponse.ProtoReflect.Descriptor instead.
func (*AddStaffResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{11}
}

func (x *AddStaffResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request to remove a staff member from a course.
type RemoveStaffRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// Staff ID.
	StaffId       string `protobuf:"bytes,2,opt,name=staff_id,json=staffId,proto3" json:"staff_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStaffRequest) Reset() {
	*x = RemoveStaffRequest{}
	mi := &file_course_microservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStaffRequest) ProtoMessage() {}

func (x *RemoveStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStaffRequest.ProtoReflect.Descriptor instead.
func (*RemoveStaffRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveStaffRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *RemoveStaffRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

// Response indicating if the staff member was successfully removed.
type RemoveStaffResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Remove success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStaffResponse) Reset() {
	*x = RemoveStaffResponse{}
	mi := &file_course_microservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStaffResponse) ProtoMessage() {}

func (x *RemoveStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStaffResponse.ProtoReflect.Descriptor instead.
func (*RemoveStaffResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveStaffResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request to delete a course by its unique ID.
type DeleteCourseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId      string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCourseRequest) Reset() {
	*x = DeleteCourseRequest{}
	mi := &file_course_microservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseRequest) ProtoMessage() {}

func (x *DeleteCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseRequest.ProtoReflect.Descriptor instead.
func (*DeleteCourseRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCourseRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

// Response indicating if the course was successfully deleted.
type DeleteCourseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Delete success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCourseResponse) Reset() {
	*x = DeleteCourseResponse{}
	mi := &file_course_microservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseResponse) ProtoMessage() {}

func (x *DeleteCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseResponse.ProtoReflect.Descriptor instead.
func (*DeleteCourseResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCourseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request to list all students in a course.
type ListStudentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId      string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStudentsRequest) Reset() {
	*x = ListStudentsRequest{}
	mi := &file_course_microservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStudentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStudentsRequest) ProtoMessage() {}

func (x *ListStudentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStudentsRequest.ProtoReflect.Descriptor instead.
func (*ListStudentsRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{16}
}

func (x *ListStudentsRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

// Response containing a list of student IDs.
type ListStudentsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Student IDs.
	StudentIds    []string `protobuf:"bytes,1,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStudentsResponse) Reset() {
	*x = ListStudentsResponse{}
	mi := &file_course_microservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStudentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStudentsResponse) ProtoMessage() {}

func (x *ListStudentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStudentsResponse.ProtoReflect.Descriptor instead.
func (*ListStudentsResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{17}
}

func (x *ListStudentsResponse) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

// Request to list all staff members in a course.
type ListStaffRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId      string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStaffRequest) Reset() {
	*x = ListStaffRequest{}
	mi := &file_course_microservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffRequest) ProtoMessage() {}

func (x *ListStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffRequest.ProtoReflect.Descriptor instead.
func (*ListStaffRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{18}
}

func (x *ListStaffRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

// Response containing a list of staff IDs.
type ListStaffResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Staff IDs.
	StaffIds      []string `protobuf:"bytes,1,rep,name=staff_ids,json=staffIds,proto3" json:"staff_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStaffResponse) Reset() {
	*x = ListStaffResponse{}
	mi := &file_course_microservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffResponse) ProtoMessage() {}

func (x *ListStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffResponse.ProtoReflect.Descriptor instead.
func (*ListStaffResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{19}
}

func (x *ListStaffResponse) GetStaffIds() []string {
	if x != nil {
		return x.StaffIds
	}
	return nil
}

// Request to add a new homework assignment to a course.
type AddHomeworkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// Homework ID.
	HomeworkId string `protobuf:"bytes,2,opt,name=homework_id,json=homeworkId,proto3" json:"homework_id,omitempty"`
	// Homework title.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Homework description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Due date in ISO 8601 format.
	DueDate       string `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddHomeworkRequest) Reset() {
	*x = AddHomeworkRequest{}
	mi := &file_course_microservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddHomeworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHomeworkRequest) ProtoMessage() {}

func (x *AddHomeworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHomeworkRequest.ProtoReflect.Descriptor instead.
func (*AddHomeworkRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{20}
}

func (x *AddHomeworkRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *AddHomeworkRequest) GetHomeworkId() string {
	if x != nil {
		return x.HomeworkId
	}
	return ""
}

func (x *AddHomeworkRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddHomeworkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddHomeworkRequest) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

// Response indicating if the homework was successfully added.
type AddHomeworkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Add success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddHomeworkResponse) Reset() {
	*x = AddHomeworkResponse{}
	mi := &file_course_microservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddHomeworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHomeworkResponse) ProtoMessage() {}

func (x *AddHomeworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHomeworkResponse.ProtoReflect.Descriptor instead.
func (*AddHomeworkResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{21}
}

func (x *AddHomeworkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request to remove a homework assignment from a course.
type RemoveHomeworkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Course ID.
	CourseId string `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// Homework ID.
	HomeworkId    string `protobuf:"bytes,2,opt,name=homework_id,json=homeworkId,proto3" json:"homework_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHomeworkRequest) Reset() {
	*x = RemoveHomeworkRequest{}
	mi := &file_course_microservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHomeworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHomeworkRequest) ProtoMessage() {}

func (x *RemoveHomeworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHomeworkRequest.ProtoReflect.Descriptor instead.
func (*RemoveHomeworkRequest) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveHomeworkRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *RemoveHomeworkRequest) GetHomeworkId() string {
	if x != nil {
		return x.HomeworkId
	}
	return ""
}

// Response indicating if the homework was successfully removed.
type RemoveHomeworkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Remove success status.
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHomeworkResponse) Reset() {
	*x = RemoveHomeworkResponse{}
	mi := &file_course_microservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHomeworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHomeworkResponse) ProtoMessage() {}

func (x *RemoveHomeworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_course_microservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHomeworkResponse.ProtoReflect.Descriptor instead.
func (*RemoveHomeworkResponse) Descriptor() ([]byte, []int) {
	return file_course_microservice_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveHomeworkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_course_microservice_proto protoreflect.FileDescriptor

var file_course_microservice_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4f,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x2e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x52, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49,
	0x64, 0x22, 0x2c, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x4c, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x22, 0x2f, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x32,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x2f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a,
	0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x96, 0x07, 0x0a, 0x0d, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x48,
	0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x47, 0x52, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2d,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_course_microservice_proto_rawDescOnce sync.Once
	file_course_microservice_proto_rawDescData = file_course_microservice_proto_rawDesc
)

func file_course_microservice_proto_rawDescGZIP() []byte {
	file_course_microservice_proto_rawDescOnce.Do(func() {
		file_course_microservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_course_microservice_proto_rawDescData)
	})
	return file_course_microservice_proto_rawDescData
}

var file_course_microservice_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_course_microservice_proto_goTypes = []any{
	(*GetCourseRequest)(nil),       // 0: course.GetCourseRequest
	(*GetCourseResponse)(nil),      // 1: course.GetCourseResponse
	(*CreateCourseRequest)(nil),    // 2: course.CreateCourseRequest
	(*CreateCourseResponse)(nil),   // 3: course.CreateCourseResponse
	(*UpdateCourseRequest)(nil),    // 4: course.UpdateCourseRequest
	(*UpdateCourseResponse)(nil),   // 5: course.UpdateCourseResponse
	(*AddStudentRequest)(nil),      // 6: course.AddStudentRequest
	(*AddStudentResponse)(nil),     // 7: course.AddStudentResponse
	(*RemoveStudentRequest)(nil),   // 8: course.RemoveStudentRequest
	(*RemoveStudentResponse)(nil),  // 9: course.RemoveStudentResponse
	(*AddStaffRequest)(nil),        // 10: course.AddStaffRequest
	(*AddStaffResponse)(nil),       // 11: course.AddStaffResponse
	(*RemoveStaffRequest)(nil),     // 12: course.RemoveStaffRequest
	(*RemoveStaffResponse)(nil),    // 13: course.RemoveStaffResponse
	(*DeleteCourseRequest)(nil),    // 14: course.DeleteCourseRequest
	(*DeleteCourseResponse)(nil),   // 15: course.DeleteCourseResponse
	(*ListStudentsRequest)(nil),    // 16: course.ListStudentsRequest
	(*ListStudentsResponse)(nil),   // 17: course.ListStudentsResponse
	(*ListStaffRequest)(nil),       // 18: course.ListStaffRequest
	(*ListStaffResponse)(nil),      // 19: course.ListStaffResponse
	(*AddHomeworkRequest)(nil),     // 20: course.AddHomeworkRequest
	(*AddHomeworkResponse)(nil),    // 21: course.AddHomeworkResponse
	(*RemoveHomeworkRequest)(nil),  // 22: course.RemoveHomeworkRequest
	(*RemoveHomeworkResponse)(nil), // 23: course.RemoveHomeworkResponse
}
var file_course_microservice_proto_depIdxs = []int32{
	0,  // 0: course.CourseService.GetCourse:input_type -> course.GetCourseRequest
	2,  // 1: course.CourseService.CreateCourse:input_type -> course.CreateCourseRequest
	4,  // 2: course.CourseService.UpdateCourse:input_type -> course.UpdateCourseRequest
	6,  // 3: course.CourseService.AddStudentToCourse:input_type -> course.AddStudentRequest
	8,  // 4: course.CourseService.RemoveStudentFromCourse:input_type -> course.RemoveStudentRequest
	10, // 5: course.CourseService.AddStaffToCourse:input_type -> course.AddStaffRequest
	12, // 6: course.CourseService.RemoveStaffFromCourse:input_type -> course.RemoveStaffRequest
	14, // 7: course.CourseService.DeleteCourse:input_type -> course.DeleteCourseRequest
	16, // 8: course.CourseService.ListStudents:input_type -> course.ListStudentsRequest
	18, // 9: course.CourseService.ListStaff:input_type -> course.ListStaffRequest
	20, // 10: course.CourseService.AddHomework:input_type -> course.AddHomeworkRequest
	22, // 11: course.CourseService.RemoveHomework:input_type -> course.RemoveHomeworkRequest
	1,  // 12: course.CourseService.GetCourse:output_type -> course.GetCourseResponse
	3,  // 13: course.CourseService.CreateCourse:output_type -> course.CreateCourseResponse
	5,  // 14: course.CourseService.UpdateCourse:output_type -> course.UpdateCourseResponse
	7,  // 15: course.CourseService.AddStudentToCourse:output_type -> course.AddStudentResponse
	9,  // 16: course.CourseService.RemoveStudentFromCourse:output_type -> course.RemoveStudentResponse
	11, // 17: course.CourseService.AddStaffToCourse:output_type -> course.AddStaffResponse
	13, // 18: course.CourseService.RemoveStaffFromCourse:output_type -> course.RemoveStaffResponse
	15, // 19: course.CourseService.DeleteCourse:output_type -> course.DeleteCourseResponse
	17, // 20: course.CourseService.ListStudents:output_type -> course.ListStudentsResponse
	19, // 21: course.CourseService.ListStaff:output_type -> course.ListStaffResponse
	21, // 22: course.CourseService.AddHomework:output_type -> course.AddHomeworkResponse
	23, // 23: course.CourseService.RemoveHomework:output_type -> course.RemoveHomeworkResponse
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_course_microservice_proto_init() }
func file_course_microservice_proto_init() {
	if File_course_microservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_course_microservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_course_microservice_proto_goTypes,
		DependencyIndexes: file_course_microservice_proto_depIdxs,
		MessageInfos:      file_course_microservice_proto_msgTypes,
	}.Build()
	File_course_microservice_proto = out.File
	file_course_microservice_proto_rawDesc = nil
	file_course_microservice_proto_goTypes = nil
	file_course_microservice_proto_depIdxs = nil
}
