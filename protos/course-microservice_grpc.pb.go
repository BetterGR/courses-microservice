// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: course-microservice.proto

package course_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourseService_GetCourse_FullMethodName               = "/course.CourseService/GetCourse"
	CourseService_CreateCourse_FullMethodName            = "/course.CourseService/CreateCourse"
	CourseService_UpdateCourse_FullMethodName            = "/course.CourseService/UpdateCourse"
	CourseService_AddStudentToCourse_FullMethodName      = "/course.CourseService/AddStudentToCourse"
	CourseService_RemoveStudentFromCourse_FullMethodName = "/course.CourseService/RemoveStudentFromCourse"
	CourseService_AddStaffToCourse_FullMethodName        = "/course.CourseService/AddStaffToCourse"
	CourseService_RemoveStaffFromCourse_FullMethodName   = "/course.CourseService/RemoveStaffFromCourse"
	CourseService_DeleteCourse_FullMethodName            = "/course.CourseService/DeleteCourse"
	CourseService_ListStudents_FullMethodName            = "/course.CourseService/ListStudents"
	CourseService_ListStaff_FullMethodName               = "/course.CourseService/ListStaff"
	CourseService_AddHomework_FullMethodName             = "/course.CourseService/AddHomework"
	CourseService_RemoveHomework_FullMethodName          = "/course.CourseService/RemoveHomework"
)

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CourseService provides gRPC methods for managing courses.
type CourseServiceClient interface {
	// Retrieves details of a course by its unique ID.
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
	// Creates a new course with the given details.
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	// Updates the details of an existing course by its unique ID.
	UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error)
	// Adds a student to a course using their unique student ID.
	AddStudentToCourse(ctx context.Context, in *AddStudentRequest, opts ...grpc.CallOption) (*AddStudentResponse, error)
	// Removes a student from a course using their unique student ID.
	RemoveStudentFromCourse(ctx context.Context, in *RemoveStudentRequest, opts ...grpc.CallOption) (*RemoveStudentResponse, error)
	// Adds a staff member to a course using their unique staff ID.
	AddStaffToCourse(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*AddStaffResponse, error)
	// Removes a staff member from a course using their unique staff ID.
	RemoveStaffFromCourse(ctx context.Context, in *RemoveStaffRequest, opts ...grpc.CallOption) (*RemoveStaffResponse, error)
	// Deletes a course by its unique ID.
	DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error)
	// Lists all students enrolled in a course.
	ListStudents(ctx context.Context, in *ListStudentsRequest, opts ...grpc.CallOption) (*ListStudentsResponse, error)
	// Lists all staff members assigned to a course.
	ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error)
	// Adds a new homework assignment to a course.
	AddHomework(ctx context.Context, in *AddHomeworkRequest, opts ...grpc.CallOption) (*AddHomeworkResponse, error)
	// Removes a homework assignment from a course by its unique ID.
	RemoveHomework(ctx context.Context, in *RemoveHomeworkRequest, opts ...grpc.CallOption) (*RemoveHomeworkResponse, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, CourseService_GetCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, CourseService_CreateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourseResponse)
	err := c.cc.Invoke(ctx, CourseService_UpdateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AddStudentToCourse(ctx context.Context, in *AddStudentRequest, opts ...grpc.CallOption) (*AddStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStudentResponse)
	err := c.cc.Invoke(ctx, CourseService_AddStudentToCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) RemoveStudentFromCourse(ctx context.Context, in *RemoveStudentRequest, opts ...grpc.CallOption) (*RemoveStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStudentResponse)
	err := c.cc.Invoke(ctx, CourseService_RemoveStudentFromCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AddStaffToCourse(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*AddStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffResponse)
	err := c.cc.Invoke(ctx, CourseService_AddStaffToCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) RemoveStaffFromCourse(ctx context.Context, in *RemoveStaffRequest, opts ...grpc.CallOption) (*RemoveStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStaffResponse)
	err := c.cc.Invoke(ctx, CourseService_RemoveStaffFromCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourseResponse)
	err := c.cc.Invoke(ctx, CourseService_DeleteCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ListStudents(ctx context.Context, in *ListStudentsRequest, opts ...grpc.CallOption) (*ListStudentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStudentsResponse)
	err := c.cc.Invoke(ctx, CourseService_ListStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffResponse)
	err := c.cc.Invoke(ctx, CourseService_ListStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AddHomework(ctx context.Context, in *AddHomeworkRequest, opts ...grpc.CallOption) (*AddHomeworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddHomeworkResponse)
	err := c.cc.Invoke(ctx, CourseService_AddHomework_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) RemoveHomework(ctx context.Context, in *RemoveHomeworkRequest, opts ...grpc.CallOption) (*RemoveHomeworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveHomeworkResponse)
	err := c.cc.Invoke(ctx, CourseService_RemoveHomework_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
// All implementations must embed UnimplementedCourseServiceServer
// for forward compatibility.
//
// CourseService provides gRPC methods for managing courses.
type CourseServiceServer interface {
	// Retrieves details of a course by its unique ID.
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	// Creates a new course with the given details.
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	// Updates the details of an existing course by its unique ID.
	UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error)
	// Adds a student to a course using their unique student ID.
	AddStudentToCourse(context.Context, *AddStudentRequest) (*AddStudentResponse, error)
	// Removes a student from a course using their unique student ID.
	RemoveStudentFromCourse(context.Context, *RemoveStudentRequest) (*RemoveStudentResponse, error)
	// Adds a staff member to a course using their unique staff ID.
	AddStaffToCourse(context.Context, *AddStaffRequest) (*AddStaffResponse, error)
	// Removes a staff member from a course using their unique staff ID.
	RemoveStaffFromCourse(context.Context, *RemoveStaffRequest) (*RemoveStaffResponse, error)
	// Deletes a course by its unique ID.
	DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error)
	// Lists all students enrolled in a course.
	ListStudents(context.Context, *ListStudentsRequest) (*ListStudentsResponse, error)
	// Lists all staff members assigned to a course.
	ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error)
	// Adds a new homework assignment to a course.
	AddHomework(context.Context, *AddHomeworkRequest) (*AddHomeworkResponse, error)
	// Removes a homework assignment from a course by its unique ID.
	RemoveHomework(context.Context, *RemoveHomeworkRequest) (*RemoveHomeworkResponse, error)
	mustEmbedUnimplementedCourseServiceServer()
}

// UnimplementedCourseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourseServiceServer struct{}

func (UnimplementedCourseServiceServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCourseServiceServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedCourseServiceServer) UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedCourseServiceServer) AddStudentToCourse(context.Context, *AddStudentRequest) (*AddStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentToCourse not implemented")
}
func (UnimplementedCourseServiceServer) RemoveStudentFromCourse(context.Context, *RemoveStudentRequest) (*RemoveStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudentFromCourse not implemented")
}
func (UnimplementedCourseServiceServer) AddStaffToCourse(context.Context, *AddStaffRequest) (*AddStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffToCourse not implemented")
}
func (UnimplementedCourseServiceServer) RemoveStaffFromCourse(context.Context, *RemoveStaffRequest) (*RemoveStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaffFromCourse not implemented")
}
func (UnimplementedCourseServiceServer) DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourse not implemented")
}
func (UnimplementedCourseServiceServer) ListStudents(context.Context, *ListStudentsRequest) (*ListStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudents not implemented")
}
func (UnimplementedCourseServiceServer) ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaff not implemented")
}
func (UnimplementedCourseServiceServer) AddHomework(context.Context, *AddHomeworkRequest) (*AddHomeworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomework not implemented")
}
func (UnimplementedCourseServiceServer) RemoveHomework(context.Context, *RemoveHomeworkRequest) (*RemoveHomeworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHomework not implemented")
}
func (UnimplementedCourseServiceServer) mustEmbedUnimplementedCourseServiceServer() {}
func (UnimplementedCourseServiceServer) testEmbeddedByValue()                       {}

// UnsafeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServiceServer will
// result in compilation errors.
type UnsafeCourseServiceServer interface {
	mustEmbedUnimplementedCourseServiceServer()
}

func RegisterCourseServiceServer(s grpc.ServiceRegistrar, srv CourseServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourseService_ServiceDesc, srv)
}

func _CourseService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_GetCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_CreateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_UpdateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpdateCourse(ctx, req.(*UpdateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AddStudentToCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AddStudentToCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_AddStudentToCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AddStudentToCourse(ctx, req.(*AddStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_RemoveStudentFromCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).RemoveStudentFromCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_RemoveStudentFromCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).RemoveStudentFromCourse(ctx, req.(*RemoveStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AddStaffToCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AddStaffToCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_AddStaffToCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AddStaffToCourse(ctx, req.(*AddStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_RemoveStaffFromCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).RemoveStaffFromCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_RemoveStaffFromCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).RemoveStaffFromCourse(ctx, req.(*RemoveStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_DeleteCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteCourse(ctx, req.(*DeleteCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ListStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_ListStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListStudents(ctx, req.(*ListStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_ListStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListStaff(ctx, req.(*ListStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AddHomework_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomeworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AddHomework(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_AddHomework_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AddHomework(ctx, req.(*AddHomeworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_RemoveHomework_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHomeworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).RemoveHomework(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_RemoveHomework_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).RemoveHomework(ctx, req.(*RemoveHomeworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseService_ServiceDesc is the grpc.ServiceDesc for CourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourse",
			Handler:    _CourseService_GetCourse_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _CourseService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _CourseService_UpdateCourse_Handler,
		},
		{
			MethodName: "AddStudentToCourse",
			Handler:    _CourseService_AddStudentToCourse_Handler,
		},
		{
			MethodName: "RemoveStudentFromCourse",
			Handler:    _CourseService_RemoveStudentFromCourse_Handler,
		},
		{
			MethodName: "AddStaffToCourse",
			Handler:    _CourseService_AddStaffToCourse_Handler,
		},
		{
			MethodName: "RemoveStaffFromCourse",
			Handler:    _CourseService_RemoveStaffFromCourse_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _CourseService_DeleteCourse_Handler,
		},
		{
			MethodName: "ListStudents",
			Handler:    _CourseService_ListStudents_Handler,
		},
		{
			MethodName: "ListStaff",
			Handler:    _CourseService_ListStaff_Handler,
		},
		{
			MethodName: "AddHomework",
			Handler:    _CourseService_AddHomework_Handler,
		},
		{
			MethodName: "RemoveHomework",
			Handler:    _CourseService_RemoveHomework_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course-microservice.proto",
}
