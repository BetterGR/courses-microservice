// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.28.3
// source: courses-microservice.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for getting a course.
type GetCourseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseRequest) Reset() {
	*x = GetCourseRequest{}
	mi := &file_courses_microservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseRequest) ProtoMessage() {}

func (x *GetCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseRequest.ProtoReflect.Descriptor instead.
func (*GetCourseRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{0}
}

func (x *GetCourseRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetCourseRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

// Response message for getting a course.
type GetCourseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Course        *Course                `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseResponse) Reset() {
	*x = GetCourseResponse{}
	mi := &file_courses_microservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseResponse) ProtoMessage() {}

func (x *GetCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseResponse.ProtoReflect.Descriptor instead.
func (*GetCourseResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{1}
}

func (x *GetCourseResponse) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

// Request message for creating a new course.
type CreateCourseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Course        *Course                `protobuf:"bytes,2,opt,name=course,proto3" json:"course,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCourseRequest) Reset() {
	*x = CreateCourseRequest{}
	mi := &file_courses_microservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseRequest) ProtoMessage() {}

func (x *CreateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseRequest.ProtoReflect.Descriptor instead.
func (*CreateCourseRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCourseRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateCourseRequest) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

// Response message for creating a new course.
type CreateCourseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Course        *Course                `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCourseResponse) Reset() {
	*x = CreateCourseResponse{}
	mi := &file_courses_microservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseResponse) ProtoMessage() {}

func (x *CreateCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseResponse.ProtoReflect.Descriptor instead.
func (*CreateCourseResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCourseResponse) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

// Request message for updating a course.
type UpdateCourseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Course        *Course                `protobuf:"bytes,2,opt,name=course,proto3" json:"course,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCourseRequest) Reset() {
	*x = UpdateCourseRequest{}
	mi := &file_courses_microservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCourseRequest) ProtoMessage() {}

func (x *UpdateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCourseRequest.ProtoReflect.Descriptor instead.
func (*UpdateCourseRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCourseRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateCourseRequest) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

// Response message for updating a course.
type UpdateCourseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Course        *Course                `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCourseResponse) Reset() {
	*x = UpdateCourseResponse{}
	mi := &file_courses_microservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCourseResponse) ProtoMessage() {}

func (x *UpdateCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCourseResponse.ProtoReflect.Descriptor instead.
func (*UpdateCourseResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCourseResponse) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

// Request message for deleting a course.
type DeleteCourseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCourseRequest) Reset() {
	*x = DeleteCourseRequest{}
	mi := &file_courses_microservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseRequest) ProtoMessage() {}

func (x *DeleteCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseRequest.ProtoReflect.Descriptor instead.
func (*DeleteCourseRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCourseRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeleteCourseRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

// Response message for deleting a course.
type DeleteCourseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCourseResponse) Reset() {
	*x = DeleteCourseResponse{}
	mi := &file_courses_microservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseResponse) ProtoMessage() {}

func (x *DeleteCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseResponse.ProtoReflect.Descriptor instead.
func (*DeleteCourseResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{7}
}

// Request message for adding a student to a course.
type AddStudentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	StudentID     string                 `protobuf:"bytes,3,opt,name=studentID,proto3" json:"studentID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStudentRequest) Reset() {
	*x = AddStudentRequest{}
	mi := &file_courses_microservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStudentRequest) ProtoMessage() {}

func (x *AddStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStudentRequest.ProtoReflect.Descriptor instead.
func (*AddStudentRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{8}
}

func (x *AddStudentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddStudentRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *AddStudentRequest) GetStudentID() string {
	if x != nil {
		return x.StudentID
	}
	return ""
}

// Response message for adding a student to a course.
type AddStudentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStudentResponse) Reset() {
	*x = AddStudentResponse{}
	mi := &file_courses_microservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStudentResponse) ProtoMessage() {}

func (x *AddStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStudentResponse.ProtoReflect.Descriptor instead.
func (*AddStudentResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{9}
}

// Request message for removing a student from a course.
type RemoveStudentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	StudentID     string                 `protobuf:"bytes,3,opt,name=studentID,proto3" json:"studentID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStudentRequest) Reset() {
	*x = RemoveStudentRequest{}
	mi := &file_courses_microservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStudentRequest) ProtoMessage() {}

func (x *RemoveStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStudentRequest.ProtoReflect.Descriptor instead.
func (*RemoveStudentRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveStudentRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RemoveStudentRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *RemoveStudentRequest) GetStudentID() string {
	if x != nil {
		return x.StudentID
	}
	return ""
}

// Response message for removing a student from a course.
type RemoveStudentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStudentResponse) Reset() {
	*x = RemoveStudentResponse{}
	mi := &file_courses_microservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStudentResponse) ProtoMessage() {}

func (x *RemoveStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStudentResponse.ProtoReflect.Descriptor instead.
func (*RemoveStudentResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{11}
}

// Request message for adding a staff member to a course.
type AddStaffRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	StaffID       string                 `protobuf:"bytes,3,opt,name=staffID,proto3" json:"staffID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStaffRequest) Reset() {
	*x = AddStaffRequest{}
	mi := &file_courses_microservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStaffRequest) ProtoMessage() {}

func (x *AddStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStaffRequest.ProtoReflect.Descriptor instead.
func (*AddStaffRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{12}
}

func (x *AddStaffRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddStaffRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *AddStaffRequest) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

// Response message for adding a staff member to a course.
type AddStaffResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStaffResponse) Reset() {
	*x = AddStaffResponse{}
	mi := &file_courses_microservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStaffResponse) ProtoMessage() {}

func (x *AddStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStaffResponse.ProtoReflect.Descriptor instead.
func (*AddStaffResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{13}
}

// Request message for removing a staff member from a course.
type RemoveStaffRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	StaffID       string                 `protobuf:"bytes,3,opt,name=staffID,proto3" json:"staffID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStaffRequest) Reset() {
	*x = RemoveStaffRequest{}
	mi := &file_courses_microservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStaffRequest) ProtoMessage() {}

func (x *RemoveStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStaffRequest.ProtoReflect.Descriptor instead.
func (*RemoveStaffRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveStaffRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RemoveStaffRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *RemoveStaffRequest) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

// Response message for removing a staff member from a course.
type RemoveStaffResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStaffResponse) Reset() {
	*x = RemoveStaffResponse{}
	mi := &file_courses_microservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStaffResponse) ProtoMessage() {}

func (x *RemoveStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStaffResponse.ProtoReflect.Descriptor instead.
func (*RemoveStaffResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{15}
}

// Request message for getting all students in a course.
type GetCourseStudentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseStudentsRequest) Reset() {
	*x = GetCourseStudentsRequest{}
	mi := &file_courses_microservice_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseStudentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseStudentsRequest) ProtoMessage() {}

func (x *GetCourseStudentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseStudentsRequest.ProtoReflect.Descriptor instead.
func (*GetCourseStudentsRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{16}
}

func (x *GetCourseStudentsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetCourseStudentsRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

// Response message for getting all students in a course.
type GetCourseStudentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentsIDs   []string               `protobuf:"bytes,1,rep,name=studentsIDs,proto3" json:"studentsIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseStudentsResponse) Reset() {
	*x = GetCourseStudentsResponse{}
	mi := &file_courses_microservice_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseStudentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseStudentsResponse) ProtoMessage() {}

func (x *GetCourseStudentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseStudentsResponse.ProtoReflect.Descriptor instead.
func (*GetCourseStudentsResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{17}
}

func (x *GetCourseStudentsResponse) GetStudentsIDs() []string {
	if x != nil {
		return x.StudentsIDs
	}
	return nil
}

// Request message for getting all staff members in a course.
type GetCourseStaffRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseStaffRequest) Reset() {
	*x = GetCourseStaffRequest{}
	mi := &file_courses_microservice_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseStaffRequest) ProtoMessage() {}

func (x *GetCourseStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseStaffRequest.ProtoReflect.Descriptor instead.
func (*GetCourseStaffRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{18}
}

func (x *GetCourseStaffRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetCourseStaffRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

// Response message for getting all staff members in a course.
type GetCourseStaffResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StaffIDs      []string               `protobuf:"bytes,1,rep,name=staffIDs,proto3" json:"staffIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseStaffResponse) Reset() {
	*x = GetCourseStaffResponse{}
	mi := &file_courses_microservice_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseStaffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseStaffResponse) ProtoMessage() {}

func (x *GetCourseStaffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseStaffResponse.ProtoReflect.Descriptor instead.
func (*GetCourseStaffResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{19}
}

func (x *GetCourseStaffResponse) GetStaffIDs() []string {
	if x != nil {
		return x.StaffIDs
	}
	return nil
}

// Request message for getting a student's courses.
type GetStudentCoursesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentID     string                 `protobuf:"bytes,2,opt,name=studentID,proto3" json:"studentID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStudentCoursesRequest) Reset() {
	*x = GetStudentCoursesRequest{}
	mi := &file_courses_microservice_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentCoursesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentCoursesRequest) ProtoMessage() {}

func (x *GetStudentCoursesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentCoursesRequest.ProtoReflect.Descriptor instead.
func (*GetStudentCoursesRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{20}
}

func (x *GetStudentCoursesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetStudentCoursesRequest) GetStudentID() string {
	if x != nil {
		return x.StudentID
	}
	return ""
}

// Response message for getting a student's courses.
type GetStudentCoursesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoursesIDs    []string               `protobuf:"bytes,1,rep,name=coursesIDs,proto3" json:"coursesIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStudentCoursesResponse) Reset() {
	*x = GetStudentCoursesResponse{}
	mi := &file_courses_microservice_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentCoursesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentCoursesResponse) ProtoMessage() {}

func (x *GetStudentCoursesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentCoursesResponse.ProtoReflect.Descriptor instead.
func (*GetStudentCoursesResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{21}
}

func (x *GetStudentCoursesResponse) GetCoursesIDs() []string {
	if x != nil {
		return x.CoursesIDs
	}
	return nil
}

// Request message for getting a staff's courses.
type GetStaffCoursesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StaffID       string                 `protobuf:"bytes,2,opt,name=staffID,proto3" json:"staffID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStaffCoursesRequest) Reset() {
	*x = GetStaffCoursesRequest{}
	mi := &file_courses_microservice_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStaffCoursesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffCoursesRequest) ProtoMessage() {}

func (x *GetStaffCoursesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffCoursesRequest.ProtoReflect.Descriptor instead.
func (*GetStaffCoursesRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{22}
}

func (x *GetStaffCoursesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetStaffCoursesRequest) GetStaffID() string {
	if x != nil {
		return x.StaffID
	}
	return ""
}

// Response message for getting a staff's courses.
type GetStaffCoursesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoursesIDs    []string               `protobuf:"bytes,1,rep,name=coursesIDs,proto3" json:"coursesIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStaffCoursesResponse) Reset() {
	*x = GetStaffCoursesResponse{}
	mi := &file_courses_microservice_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStaffCoursesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffCoursesResponse) ProtoMessage() {}

func (x *GetStaffCoursesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffCoursesResponse.ProtoReflect.Descriptor instead.
func (*GetStaffCoursesResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{23}
}

func (x *GetStaffCoursesResponse) GetCoursesIDs() []string {
	if x != nil {
		return x.CoursesIDs
	}
	return nil
}

// Request message for adding an announcement to a course.
type AddAnnouncementRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=CourseID,proto3" json:"CourseID,omitempty"`
	Announcement  *Announcement          `protobuf:"bytes,3,opt,name=announcement,proto3" json:"announcement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAnnouncementRequest) Reset() {
	*x = AddAnnouncementRequest{}
	mi := &file_courses_microservice_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAnnouncementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAnnouncementRequest) ProtoMessage() {}

func (x *AddAnnouncementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAnnouncementRequest.ProtoReflect.Descriptor instead.
func (*AddAnnouncementRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{24}
}

func (x *AddAnnouncementRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddAnnouncementRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *AddAnnouncementRequest) GetAnnouncement() *Announcement {
	if x != nil {
		return x.Announcement
	}
	return nil
}

// Response message for adding an announcement to a course.
type AddAnnouncementResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Announcement  *Announcement          `protobuf:"bytes,1,opt,name=announcement,proto3" json:"announcement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAnnouncementResponse) Reset() {
	*x = AddAnnouncementResponse{}
	mi := &file_courses_microservice_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAnnouncementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAnnouncementResponse) ProtoMessage() {}

func (x *AddAnnouncementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAnnouncementResponse.ProtoReflect.Descriptor instead.
func (*AddAnnouncementResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{25}
}

func (x *AddAnnouncementResponse) GetAnnouncement() *Announcement {
	if x != nil {
		return x.Announcement
	}
	return nil
}

// Request message for getting all announcements in a course.
type GetCourseAnnouncementsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID      string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseAnnouncementsRequest) Reset() {
	*x = GetCourseAnnouncementsRequest{}
	mi := &file_courses_microservice_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseAnnouncementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseAnnouncementsRequest) ProtoMessage() {}

func (x *GetCourseAnnouncementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseAnnouncementsRequest.ProtoReflect.Descriptor instead.
func (*GetCourseAnnouncementsRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{26}
}

func (x *GetCourseAnnouncementsRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetCourseAnnouncementsRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

// Response message for getting all announcements in a course.
type GetCourseAnnouncementsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Announcements []*Announcement        `protobuf:"bytes,1,rep,name=announcements,proto3" json:"announcements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseAnnouncementsResponse) Reset() {
	*x = GetCourseAnnouncementsResponse{}
	mi := &file_courses_microservice_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseAnnouncementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseAnnouncementsResponse) ProtoMessage() {}

func (x *GetCourseAnnouncementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseAnnouncementsResponse.ProtoReflect.Descriptor instead.
func (*GetCourseAnnouncementsResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{27}
}

func (x *GetCourseAnnouncementsResponse) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

// Request message for removing an announcement from a course.
type RemoveAnnouncementRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Token          string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseID       string                 `protobuf:"bytes,2,opt,name=courseID,proto3" json:"courseID,omitempty"`
	AnnouncementID string                 `protobuf:"bytes,3,opt,name=announcementID,proto3" json:"announcementID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RemoveAnnouncementRequest) Reset() {
	*x = RemoveAnnouncementRequest{}
	mi := &file_courses_microservice_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAnnouncementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAnnouncementRequest) ProtoMessage() {}

func (x *RemoveAnnouncementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAnnouncementRequest.ProtoReflect.Descriptor instead.
func (*RemoveAnnouncementRequest) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveAnnouncementRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RemoveAnnouncementRequest) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *RemoveAnnouncementRequest) GetAnnouncementID() string {
	if x != nil {
		return x.AnnouncementID
	}
	return ""
}

// Response message for removing an announcement from a course.
type RemoveAnnouncementResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAnnouncementResponse) Reset() {
	*x = RemoveAnnouncementResponse{}
	mi := &file_courses_microservice_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAnnouncementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAnnouncementResponse) ProtoMessage() {}

func (x *RemoveAnnouncementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAnnouncementResponse.ProtoReflect.Descriptor instead.
func (*RemoveAnnouncementResponse) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{29}
}

// Message representing a course.
type Course struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseID      string                 `protobuf:"bytes,1,opt,name=courseID,proto3" json:"courseID,omitempty"`
	CourseName    string                 `protobuf:"bytes,2,opt,name=courseName,proto3" json:"courseName,omitempty"`
	Semester      string                 `protobuf:"bytes,3,opt,name=semester,proto3" json:"semester,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Course) Reset() {
	*x = Course{}
	mi := &file_courses_microservice_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{30}
}

func (x *Course) GetCourseID() string {
	if x != nil {
		return x.CourseID
	}
	return ""
}

func (x *Course) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *Course) GetSemester() string {
	if x != nil {
		return x.Semester
	}
	return ""
}

func (x *Course) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Announcement struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AnnouncementID      string                 `protobuf:"bytes,1,opt,name=AnnouncementID,proto3" json:"AnnouncementID,omitempty"`
	AnnouncementTitle   string                 `protobuf:"bytes,2,opt,name=AnnouncementTitle,proto3" json:"AnnouncementTitle,omitempty"`
	AnnouncementContent string                 `protobuf:"bytes,3,opt,name=AnnouncementContent,proto3" json:"AnnouncementContent,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Announcement) Reset() {
	*x = Announcement{}
	mi := &file_courses_microservice_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Announcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announcement) ProtoMessage() {}

func (x *Announcement) ProtoReflect() protoreflect.Message {
	mi := &file_courses_microservice_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announcement.ProtoReflect.Descriptor instead.
func (*Announcement) Descriptor() ([]byte, []int) {
	return file_courses_microservice_proto_rawDescGZIP(), []int{31}
}

func (x *Announcement) GetAnnouncementID() string {
	if x != nil {
		return x.AnnouncementID
	}
	return ""
}

func (x *Announcement) GetAnnouncementTitle() string {
	if x != nil {
		return x.AnnouncementTitle
	}
	return ""
}

func (x *Announcement) GetAnnouncementContent() string {
	if x != nil {
		return x.AnnouncementContent
	}
	return ""
}

var File_courses_microservice_proto protoreflect.FileDescriptor

var file_courses_microservice_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22,
	0x3f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x22, 0x54, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44,
	0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x14, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x17, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x22, 0x3d,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x44, 0x73, 0x22, 0x49, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x73, 0x22, 0x4e,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x3b,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x49, 0x44, 0x73, 0x22, 0x48, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x49, 0x44, 0x73,
	0x22, 0x85, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a,
	0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x51,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x44, 0x22, 0x5d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x75, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x32, 0x94, 0x0a, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x18,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x26, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x47,
	0x52, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_courses_microservice_proto_rawDescOnce sync.Once
	file_courses_microservice_proto_rawDescData = file_courses_microservice_proto_rawDesc
)

func file_courses_microservice_proto_rawDescGZIP() []byte {
	file_courses_microservice_proto_rawDescOnce.Do(func() {
		file_courses_microservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_courses_microservice_proto_rawDescData)
	})
	return file_courses_microservice_proto_rawDescData
}

var file_courses_microservice_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_courses_microservice_proto_goTypes = []any{
	(*GetCourseRequest)(nil),               // 0: courses.GetCourseRequest
	(*GetCourseResponse)(nil),              // 1: courses.GetCourseResponse
	(*CreateCourseRequest)(nil),            // 2: courses.CreateCourseRequest
	(*CreateCourseResponse)(nil),           // 3: courses.CreateCourseResponse
	(*UpdateCourseRequest)(nil),            // 4: courses.UpdateCourseRequest
	(*UpdateCourseResponse)(nil),           // 5: courses.UpdateCourseResponse
	(*DeleteCourseRequest)(nil),            // 6: courses.DeleteCourseRequest
	(*DeleteCourseResponse)(nil),           // 7: courses.DeleteCourseResponse
	(*AddStudentRequest)(nil),              // 8: courses.AddStudentRequest
	(*AddStudentResponse)(nil),             // 9: courses.AddStudentResponse
	(*RemoveStudentRequest)(nil),           // 10: courses.RemoveStudentRequest
	(*RemoveStudentResponse)(nil),          // 11: courses.RemoveStudentResponse
	(*AddStaffRequest)(nil),                // 12: courses.AddStaffRequest
	(*AddStaffResponse)(nil),               // 13: courses.AddStaffResponse
	(*RemoveStaffRequest)(nil),             // 14: courses.RemoveStaffRequest
	(*RemoveStaffResponse)(nil),            // 15: courses.RemoveStaffResponse
	(*GetCourseStudentsRequest)(nil),       // 16: courses.GetCourseStudentsRequest
	(*GetCourseStudentsResponse)(nil),      // 17: courses.GetCourseStudentsResponse
	(*GetCourseStaffRequest)(nil),          // 18: courses.GetCourseStaffRequest
	(*GetCourseStaffResponse)(nil),         // 19: courses.GetCourseStaffResponse
	(*GetStudentCoursesRequest)(nil),       // 20: courses.GetStudentCoursesRequest
	(*GetStudentCoursesResponse)(nil),      // 21: courses.GetStudentCoursesResponse
	(*GetStaffCoursesRequest)(nil),         // 22: courses.GetStaffCoursesRequest
	(*GetStaffCoursesResponse)(nil),        // 23: courses.GetStaffCoursesResponse
	(*AddAnnouncementRequest)(nil),         // 24: courses.AddAnnouncementRequest
	(*AddAnnouncementResponse)(nil),        // 25: courses.AddAnnouncementResponse
	(*GetCourseAnnouncementsRequest)(nil),  // 26: courses.GetCourseAnnouncementsRequest
	(*GetCourseAnnouncementsResponse)(nil), // 27: courses.GetCourseAnnouncementsResponse
	(*RemoveAnnouncementRequest)(nil),      // 28: courses.RemoveAnnouncementRequest
	(*RemoveAnnouncementResponse)(nil),     // 29: courses.RemoveAnnouncementResponse
	(*Course)(nil),                         // 30: courses.Course
	(*Announcement)(nil),                   // 31: courses.Announcement
}
var file_courses_microservice_proto_depIdxs = []int32{
	30, // 0: courses.GetCourseResponse.course:type_name -> courses.Course
	30, // 1: courses.CreateCourseRequest.course:type_name -> courses.Course
	30, // 2: courses.CreateCourseResponse.course:type_name -> courses.Course
	30, // 3: courses.UpdateCourseRequest.course:type_name -> courses.Course
	30, // 4: courses.UpdateCourseResponse.course:type_name -> courses.Course
	31, // 5: courses.AddAnnouncementRequest.announcement:type_name -> courses.Announcement
	31, // 6: courses.AddAnnouncementResponse.announcement:type_name -> courses.Announcement
	31, // 7: courses.GetCourseAnnouncementsResponse.announcements:type_name -> courses.Announcement
	0,  // 8: courses.CoursesService.GetCourse:input_type -> courses.GetCourseRequest
	2,  // 9: courses.CoursesService.CreateCourse:input_type -> courses.CreateCourseRequest
	4,  // 10: courses.CoursesService.UpdateCourse:input_type -> courses.UpdateCourseRequest
	6,  // 11: courses.CoursesService.DeleteCourse:input_type -> courses.DeleteCourseRequest
	8,  // 12: courses.CoursesService.AddStudentToCourse:input_type -> courses.AddStudentRequest
	10, // 13: courses.CoursesService.RemoveStudentFromCourse:input_type -> courses.RemoveStudentRequest
	12, // 14: courses.CoursesService.AddStaffToCourse:input_type -> courses.AddStaffRequest
	14, // 15: courses.CoursesService.RemoveStaffFromCourse:input_type -> courses.RemoveStaffRequest
	16, // 16: courses.CoursesService.GetCourseStudents:input_type -> courses.GetCourseStudentsRequest
	18, // 17: courses.CoursesService.GetCourseStaff:input_type -> courses.GetCourseStaffRequest
	20, // 18: courses.CoursesService.GetStudentCourses:input_type -> courses.GetStudentCoursesRequest
	22, // 19: courses.CoursesService.GetStaffCourses:input_type -> courses.GetStaffCoursesRequest
	24, // 20: courses.CoursesService.AddAnnouncementToCourse:input_type -> courses.AddAnnouncementRequest
	26, // 21: courses.CoursesService.GetCourseAnnouncements:input_type -> courses.GetCourseAnnouncementsRequest
	28, // 22: courses.CoursesService.RemoveAnnouncementFromCourse:input_type -> courses.RemoveAnnouncementRequest
	1,  // 23: courses.CoursesService.GetCourse:output_type -> courses.GetCourseResponse
	3,  // 24: courses.CoursesService.CreateCourse:output_type -> courses.CreateCourseResponse
	5,  // 25: courses.CoursesService.UpdateCourse:output_type -> courses.UpdateCourseResponse
	7,  // 26: courses.CoursesService.DeleteCourse:output_type -> courses.DeleteCourseResponse
	9,  // 27: courses.CoursesService.AddStudentToCourse:output_type -> courses.AddStudentResponse
	11, // 28: courses.CoursesService.RemoveStudentFromCourse:output_type -> courses.RemoveStudentResponse
	13, // 29: courses.CoursesService.AddStaffToCourse:output_type -> courses.AddStaffResponse
	15, // 30: courses.CoursesService.RemoveStaffFromCourse:output_type -> courses.RemoveStaffResponse
	17, // 31: courses.CoursesService.GetCourseStudents:output_type -> courses.GetCourseStudentsResponse
	19, // 32: courses.CoursesService.GetCourseStaff:output_type -> courses.GetCourseStaffResponse
	21, // 33: courses.CoursesService.GetStudentCourses:output_type -> courses.GetStudentCoursesResponse
	23, // 34: courses.CoursesService.GetStaffCourses:output_type -> courses.GetStaffCoursesResponse
	25, // 35: courses.CoursesService.AddAnnouncementToCourse:output_type -> courses.AddAnnouncementResponse
	27, // 36: courses.CoursesService.GetCourseAnnouncements:output_type -> courses.GetCourseAnnouncementsResponse
	29, // 37: courses.CoursesService.RemoveAnnouncementFromCourse:output_type -> courses.RemoveAnnouncementResponse
	23, // [23:38] is the sub-list for method output_type
	8,  // [8:23] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_courses_microservice_proto_init() }
func file_courses_microservice_proto_init() {
	if File_courses_microservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_courses_microservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_courses_microservice_proto_goTypes,
		DependencyIndexes: file_courses_microservice_proto_depIdxs,
		MessageInfos:      file_courses_microservice_proto_msgTypes,
	}.Build()
	File_courses_microservice_proto = out.File
	file_courses_microservice_proto_rawDesc = nil
	file_courses_microservice_proto_goTypes = nil
	file_courses_microservice_proto_depIdxs = nil
}
