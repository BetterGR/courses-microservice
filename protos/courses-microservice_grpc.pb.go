// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: courses-microservice.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoursesService_GetCourse_FullMethodName                    = "/courses.CoursesService/GetCourse"
	CoursesService_CreateCourse_FullMethodName                 = "/courses.CoursesService/CreateCourse"
	CoursesService_UpdateCourse_FullMethodName                 = "/courses.CoursesService/UpdateCourse"
	CoursesService_DeleteCourse_FullMethodName                 = "/courses.CoursesService/DeleteCourse"
	CoursesService_AddStudentToCourse_FullMethodName           = "/courses.CoursesService/AddStudentToCourse"
	CoursesService_RemoveStudentFromCourse_FullMethodName      = "/courses.CoursesService/RemoveStudentFromCourse"
	CoursesService_AddStaffToCourse_FullMethodName             = "/courses.CoursesService/AddStaffToCourse"
	CoursesService_RemoveStaffFromCourse_FullMethodName        = "/courses.CoursesService/RemoveStaffFromCourse"
	CoursesService_GetCourseStudents_FullMethodName            = "/courses.CoursesService/GetCourseStudents"
	CoursesService_GetCourseStaff_FullMethodName               = "/courses.CoursesService/GetCourseStaff"
	CoursesService_GetStudentCourses_FullMethodName            = "/courses.CoursesService/GetStudentCourses"
	CoursesService_GetStaffCourses_FullMethodName              = "/courses.CoursesService/GetStaffCourses"
	CoursesService_AddAnnouncementToCourse_FullMethodName      = "/courses.CoursesService/AddAnnouncementToCourse"
	CoursesService_RemoveAnnouncementFromCourse_FullMethodName = "/courses.CoursesService/RemoveAnnouncementFromCourse"
)

// CoursesServiceClient is the client API for CoursesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoursesServiceClient interface {
	// Get course.
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
	// Create a new course.
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	// Update a course.
	UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error)
	// Delete a course.
	DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error)
	// Add a student to a course.
	AddStudentToCourse(ctx context.Context, in *AddStudentRequest, opts ...grpc.CallOption) (*AddStudentResponse, error)
	// Remove a student from a course.
	RemoveStudentFromCourse(ctx context.Context, in *RemoveStudentRequest, opts ...grpc.CallOption) (*RemoveStudentResponse, error)
	// Add a staff member to a course.
	AddStaffToCourse(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*AddStaffResponse, error)
	// Remove a staff member from a course.
	RemoveStaffFromCourse(ctx context.Context, in *RemoveStaffRequest, opts ...grpc.CallOption) (*RemoveStaffResponse, error)
	// Get all students enrolled in a course.
	GetCourseStudents(ctx context.Context, in *GetCourseStudentsRequest, opts ...grpc.CallOption) (*GetCourseStudentsResponse, error)
	// Get all staff members assigned to a course.
	GetCourseStaff(ctx context.Context, in *GetCourseStaffRequest, opts ...grpc.CallOption) (*GetCourseStaffResponse, error)
	// Get student's courses.
	GetStudentCourses(ctx context.Context, in *GetStudentCoursesRequest, opts ...grpc.CallOption) (*GetStudentCoursesResponse, error)
	// Get staff's courses.
	GetStaffCourses(ctx context.Context, in *GetStaffCoursesRequest, opts ...grpc.CallOption) (*GetStaffCoursesResponse, error)
	// Add an announcement to a course.
	AddAnnouncementToCourse(ctx context.Context, in *AddAnnouncementRequest, opts ...grpc.CallOption) (*AddAnnouncementResponse, error)
	// Remove an announcement from a course.
	RemoveAnnouncementFromCourse(ctx context.Context, in *RemoveAnnouncementRequest, opts ...grpc.CallOption) (*RemoveAnnouncementResponse, error)
}

type coursesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoursesServiceClient(cc grpc.ClientConnInterface) CoursesServiceClient {
	return &coursesServiceClient{cc}
}

func (c *coursesServiceClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, CoursesService_GetCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, CoursesService_CreateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourseResponse)
	err := c.cc.Invoke(ctx, CoursesService_UpdateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourseResponse)
	err := c.cc.Invoke(ctx, CoursesService_DeleteCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) AddStudentToCourse(ctx context.Context, in *AddStudentRequest, opts ...grpc.CallOption) (*AddStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStudentResponse)
	err := c.cc.Invoke(ctx, CoursesService_AddStudentToCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) RemoveStudentFromCourse(ctx context.Context, in *RemoveStudentRequest, opts ...grpc.CallOption) (*RemoveStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStudentResponse)
	err := c.cc.Invoke(ctx, CoursesService_RemoveStudentFromCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) AddStaffToCourse(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*AddStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffResponse)
	err := c.cc.Invoke(ctx, CoursesService_AddStaffToCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) RemoveStaffFromCourse(ctx context.Context, in *RemoveStaffRequest, opts ...grpc.CallOption) (*RemoveStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStaffResponse)
	err := c.cc.Invoke(ctx, CoursesService_RemoveStaffFromCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) GetCourseStudents(ctx context.Context, in *GetCourseStudentsRequest, opts ...grpc.CallOption) (*GetCourseStudentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseStudentsResponse)
	err := c.cc.Invoke(ctx, CoursesService_GetCourseStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) GetCourseStaff(ctx context.Context, in *GetCourseStaffRequest, opts ...grpc.CallOption) (*GetCourseStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseStaffResponse)
	err := c.cc.Invoke(ctx, CoursesService_GetCourseStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) GetStudentCourses(ctx context.Context, in *GetStudentCoursesRequest, opts ...grpc.CallOption) (*GetStudentCoursesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentCoursesResponse)
	err := c.cc.Invoke(ctx, CoursesService_GetStudentCourses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) GetStaffCourses(ctx context.Context, in *GetStaffCoursesRequest, opts ...grpc.CallOption) (*GetStaffCoursesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaffCoursesResponse)
	err := c.cc.Invoke(ctx, CoursesService_GetStaffCourses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) AddAnnouncementToCourse(ctx context.Context, in *AddAnnouncementRequest, opts ...grpc.CallOption) (*AddAnnouncementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAnnouncementResponse)
	err := c.cc.Invoke(ctx, CoursesService_AddAnnouncementToCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) RemoveAnnouncementFromCourse(ctx context.Context, in *RemoveAnnouncementRequest, opts ...grpc.CallOption) (*RemoveAnnouncementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAnnouncementResponse)
	err := c.cc.Invoke(ctx, CoursesService_RemoveAnnouncementFromCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoursesServiceServer is the server API for CoursesService service.
// All implementations must embed UnimplementedCoursesServiceServer
// for forward compatibility.
type CoursesServiceServer interface {
	// Get course.
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	// Create a new course.
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	// Update a course.
	UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error)
	// Delete a course.
	DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error)
	// Add a student to a course.
	AddStudentToCourse(context.Context, *AddStudentRequest) (*AddStudentResponse, error)
	// Remove a student from a course.
	RemoveStudentFromCourse(context.Context, *RemoveStudentRequest) (*RemoveStudentResponse, error)
	// Add a staff member to a course.
	AddStaffToCourse(context.Context, *AddStaffRequest) (*AddStaffResponse, error)
	// Remove a staff member from a course.
	RemoveStaffFromCourse(context.Context, *RemoveStaffRequest) (*RemoveStaffResponse, error)
	// Get all students enrolled in a course.
	GetCourseStudents(context.Context, *GetCourseStudentsRequest) (*GetCourseStudentsResponse, error)
	// Get all staff members assigned to a course.
	GetCourseStaff(context.Context, *GetCourseStaffRequest) (*GetCourseStaffResponse, error)
	// Get student's courses.
	GetStudentCourses(context.Context, *GetStudentCoursesRequest) (*GetStudentCoursesResponse, error)
	// Get staff's courses.
	GetStaffCourses(context.Context, *GetStaffCoursesRequest) (*GetStaffCoursesResponse, error)
	// Add an announcement to a course.
	AddAnnouncementToCourse(context.Context, *AddAnnouncementRequest) (*AddAnnouncementResponse, error)
	// Remove an announcement from a course.
	RemoveAnnouncementFromCourse(context.Context, *RemoveAnnouncementRequest) (*RemoveAnnouncementResponse, error)
	mustEmbedUnimplementedCoursesServiceServer()
}

// UnimplementedCoursesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoursesServiceServer struct{}

func (UnimplementedCoursesServiceServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCoursesServiceServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedCoursesServiceServer) UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedCoursesServiceServer) DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourse not implemented")
}
func (UnimplementedCoursesServiceServer) AddStudentToCourse(context.Context, *AddStudentRequest) (*AddStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentToCourse not implemented")
}
func (UnimplementedCoursesServiceServer) RemoveStudentFromCourse(context.Context, *RemoveStudentRequest) (*RemoveStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudentFromCourse not implemented")
}
func (UnimplementedCoursesServiceServer) AddStaffToCourse(context.Context, *AddStaffRequest) (*AddStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffToCourse not implemented")
}
func (UnimplementedCoursesServiceServer) RemoveStaffFromCourse(context.Context, *RemoveStaffRequest) (*RemoveStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaffFromCourse not implemented")
}
func (UnimplementedCoursesServiceServer) GetCourseStudents(context.Context, *GetCourseStudentsRequest) (*GetCourseStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseStudents not implemented")
}
func (UnimplementedCoursesServiceServer) GetCourseStaff(context.Context, *GetCourseStaffRequest) (*GetCourseStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseStaff not implemented")
}
func (UnimplementedCoursesServiceServer) GetStudentCourses(context.Context, *GetStudentCoursesRequest) (*GetStudentCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentCourses not implemented")
}
func (UnimplementedCoursesServiceServer) GetStaffCourses(context.Context, *GetStaffCoursesRequest) (*GetStaffCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffCourses not implemented")
}
func (UnimplementedCoursesServiceServer) AddAnnouncementToCourse(context.Context, *AddAnnouncementRequest) (*AddAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnnouncementToCourse not implemented")
}
func (UnimplementedCoursesServiceServer) RemoveAnnouncementFromCourse(context.Context, *RemoveAnnouncementRequest) (*RemoveAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAnnouncementFromCourse not implemented")
}
func (UnimplementedCoursesServiceServer) mustEmbedUnimplementedCoursesServiceServer() {}
func (UnimplementedCoursesServiceServer) testEmbeddedByValue()                        {}

// UnsafeCoursesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoursesServiceServer will
// result in compilation errors.
type UnsafeCoursesServiceServer interface {
	mustEmbedUnimplementedCoursesServiceServer()
}

func RegisterCoursesServiceServer(s grpc.ServiceRegistrar, srv CoursesServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoursesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoursesService_ServiceDesc, srv)
}

func _CoursesService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_GetCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_CreateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_UpdateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).UpdateCourse(ctx, req.(*UpdateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_DeleteCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).DeleteCourse(ctx, req.(*DeleteCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_AddStudentToCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).AddStudentToCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_AddStudentToCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).AddStudentToCourse(ctx, req.(*AddStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_RemoveStudentFromCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).RemoveStudentFromCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_RemoveStudentFromCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).RemoveStudentFromCourse(ctx, req.(*RemoveStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_AddStaffToCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).AddStaffToCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_AddStaffToCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).AddStaffToCourse(ctx, req.(*AddStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_RemoveStaffFromCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).RemoveStaffFromCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_RemoveStaffFromCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).RemoveStaffFromCourse(ctx, req.(*RemoveStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_GetCourseStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).GetCourseStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_GetCourseStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).GetCourseStudents(ctx, req.(*GetCourseStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_GetCourseStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).GetCourseStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_GetCourseStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).GetCourseStaff(ctx, req.(*GetCourseStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_GetStudentCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).GetStudentCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_GetStudentCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).GetStudentCourses(ctx, req.(*GetStudentCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_GetStaffCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).GetStaffCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_GetStaffCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).GetStaffCourses(ctx, req.(*GetStaffCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_AddAnnouncementToCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).AddAnnouncementToCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_AddAnnouncementToCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).AddAnnouncementToCourse(ctx, req.(*AddAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_RemoveAnnouncementFromCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).RemoveAnnouncementFromCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoursesService_RemoveAnnouncementFromCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).RemoveAnnouncementFromCourse(ctx, req.(*RemoveAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoursesService_ServiceDesc is the grpc.ServiceDesc for CoursesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoursesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "courses.CoursesService",
	HandlerType: (*CoursesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourse",
			Handler:    _CoursesService_GetCourse_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _CoursesService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _CoursesService_UpdateCourse_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _CoursesService_DeleteCourse_Handler,
		},
		{
			MethodName: "AddStudentToCourse",
			Handler:    _CoursesService_AddStudentToCourse_Handler,
		},
		{
			MethodName: "RemoveStudentFromCourse",
			Handler:    _CoursesService_RemoveStudentFromCourse_Handler,
		},
		{
			MethodName: "AddStaffToCourse",
			Handler:    _CoursesService_AddStaffToCourse_Handler,
		},
		{
			MethodName: "RemoveStaffFromCourse",
			Handler:    _CoursesService_RemoveStaffFromCourse_Handler,
		},
		{
			MethodName: "GetCourseStudents",
			Handler:    _CoursesService_GetCourseStudents_Handler,
		},
		{
			MethodName: "GetCourseStaff",
			Handler:    _CoursesService_GetCourseStaff_Handler,
		},
		{
			MethodName: "GetStudentCourses",
			Handler:    _CoursesService_GetStudentCourses_Handler,
		},
		{
			MethodName: "GetStaffCourses",
			Handler:    _CoursesService_GetStaffCourses_Handler,
		},
		{
			MethodName: "AddAnnouncementToCourse",
			Handler:    _CoursesService_AddAnnouncementToCourse_Handler,
		},
		{
			MethodName: "RemoveAnnouncementFromCourse",
			Handler:    _CoursesService_RemoveAnnouncementFromCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courses-microservice.proto",
}
